import AsyncStorage from '@react-native-async-storage/async-storage';
import { useFocusEffect } from '@react-navigation/native';
import { useCallback, useState } from 'react';
// üî• Import th√™m 'Keyboard' ƒë·ªÉ ·∫©n b√†n ph√≠m
import { FlatList, Image, Keyboard, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';
import Toast from 'react-native-toast-message';


const imagesMap = {
    'com-ga-xoi-mo.jpeg': require('../../assets/images/com-ga-xoi-mo.jpeg'),
    'banh-mi.jpeg': require('../../assets/images/banh-mi.jpeg'),
    'xoi-man.jpeg': require('../../assets/images/xoi-man.jpeg'),
    'pho.jpeg': require('../../assets/images/pho.jpeg'),
    'ca-phe.jpeg': require('../../assets/images/ca-phe.jpeg'),
    'com-suon.jpeg': require('../../assets/images/com-suon.jpeg'),
    'chuoi.jpeg': require('../../assets/images/chuoi.jpeg'),
    'soai.jpeg': require('../../assets/images/soai.jpeg'),
    'cam.jpeg': require('../../assets/images/cam.jpeg'),
    'kiwi.jpeg': require('../../assets/images/kiwi.jpeg'),
    'nho.jpeg': require('../../assets/images/nho.jpeg'),
    'tao.jpeg': require('../../assets/images/tao.jpeg'),
};

export default function CartScreen() {
    const [customerInfo, setCustomerInfo] = useState(null);
    const [cart, setCart] = useState([]);
    const [newPhone, setNewPhone] = useState('');
    const [newAddress, setNewAddress] = useState('');

    // Chuy·ªÉn logic load d·ªØ li·ªáu v√†o useCallback
    const loadData = useCallback(async () => {
        try {
            console.log('--- T·∫£i l·∫°i d·ªØ li·ªáu Gi·ªè h√†ng ---');
            const infoJson = await AsyncStorage.getItem('user');
            if (infoJson) {
                const info = JSON.parse(infoJson);
                setCustomerInfo(info);

                // Set gi√° tr·ªã m·∫∑c ƒë·ªãnh cho TextInput n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu
                setNewPhone(info.phone || '');
                setNewAddress(info.address || '');
            } else {
                setCustomerInfo(null);
            }

            const cartJson = await AsyncStorage.getItem('cart');
            setCart(cartJson ? JSON.parse(cartJson) : []);
        } catch (error) {
            console.error('L·ªói load d·ªØ li·ªáu:', error);
        }
    }, []);

    useFocusEffect(
        useCallback(() => {
            loadData();
        }, [loadData])
    );

    const handleUpdateCustomerInfo = async () => {
        const phoneTrimmed = newPhone.trim();
        const addressTrimmed = newAddress.trim();

        if (!phoneTrimmed || !addressTrimmed) {
            Toast.show({
                type: 'error',
                text1: 'Thi·∫øu th√¥ng tin',
                text2: 'Vui l√≤ng nh·∫≠p ƒë·ªß S·ªë ƒëi·ªán tho·∫°i v√† ƒê·ªãa ch·ªâ.',
            });
            return;
        }

        // üî• R√ÄNG BU·ªòC S·ªê ƒêI·ªÜN THO·∫†I 10 CH·ªÆ S·ªê (ƒê·ªäNH D·∫†NG VI·ªÜT NAM TH√îNG D·ª§NG) üî•
        // Regex ki·ªÉm tra ph·∫£i l√† 10 ch·ªØ s·ªë
        const phoneRegex = /^\d{10}$/;

        // Ki·ªÉm tra th√™m ƒëi·ªÅu ki·ªán ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 (ƒë·ªÉ g·∫ßn v·ªõi ƒë·ªãnh d·∫°ng VN h∆°n)
        if (!phoneRegex.test(phoneTrimmed) || !phoneTrimmed.startsWith('0')) {
            Toast.show({
                type: 'error',
                text1: 'L·ªói SƒêT',
                text2: 'Nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i',
                position: 'top',
                topOffset: 50,
            });
            return;
        }

        if (!customerInfo) {
            Toast.show({
                type: 'error',
                text1: 'L·ªói',
                text2: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n ƒë·ªÉ c·∫≠p nh·∫≠t.',
            });
            return;
        }

        const updatedInfo = {
            ...customerInfo,
            phone: phoneTrimmed,
            address: addressTrimmed,
        };

        try {
            await AsyncStorage.setItem('user', JSON.stringify(updatedInfo));
            setCustomerInfo(updatedInfo); // C·∫≠p nh·∫≠t state
            Toast.show({
                type: 'success',
                text1: 'Th√†nh c√¥ng',
                text2: 'ƒê√£ c·∫≠p nh·∫≠t S·ªë ƒëi·ªán tho·∫°i & ƒê·ªãa ch·ªâ.',
                position: 'top',
                topOffset: 50,
            });

            // üî• TH√äM D√íNG N√ÄY ƒê·ªÇ ·∫®N B√ÄN PH√çM TR√äN IOS/ANDROID üî•
            Keyboard.dismiss();

        } catch (error) {
            console.error('L·ªói c·∫≠p nh·∫≠t th√¥ng tin:', error);
            Toast.show({
                type: 'error',
                text1: 'L·ªói',
                text2: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.',
                position: 'top',
                topOffset: 50,
            });
        }
    };

    const handleRemoveItem = async (itemId) => {
        const newCart = cart.filter(item => item.id !== itemId);

        try {
            await AsyncStorage.setItem('cart', JSON.stringify(newCart));
            setCart(newCart);

            Toast.show({
                type: 'success',
                text1: 'Th√†nh c√¥ng',
                text2: 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.',
                position: 'top',
                topOffset: 50,
            });
        } catch (error) {
            console.error('L·ªói x√≥a s·∫£n ph·∫©m:', error);
            Toast.show({
                type: 'error',
                text1: 'L·ªói',
                text2: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.',
                position: 'top',
                topOffset: 50,
            });
        }
    };

    // T·ªïng ti·ªÅn
    const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

    // X·ª≠ l√Ω ƒë·∫∑t h√†ng (Gi·ªØ nguy√™n)
    const handlePlaceOrder = async () => {
        if (!customerInfo || !customerInfo.phone || !customerInfo.address) { // ƒêI·ªÄU KI·ªÜN M·ªöI
            Toast.show({
                type: 'error',
                text1: 'Thi·∫øu th√¥ng tin',
                text2: 'Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin',
                position: 'top',
                topOffset: 50,
            });
            return;
        }
        if (cart.length === 0) {
            Toast.show({
                type: 'error',
                text1: 'Gi·ªè h√†ng tr·ªëng',
                text2: 'B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè.',
                position: 'top',
                topOffset: 50,
            });
            return;
        }

        const order = {
            id: Date.now().toString(),
            customer: customerInfo,
            items: cart,
            total: totalPrice,
            date: new Date().toISOString(),
        };

        try {
            const ordersJson = await AsyncStorage.getItem('orders');
            let orders = ordersJson ? JSON.parse(ordersJson) : [];

            orders.push(order);

            await AsyncStorage.setItem('orders', JSON.stringify(orders));

            await AsyncStorage.removeItem('cart');
            setCart([]);

            Toast.show({
                type: 'success',
                text1: 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
                text2: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!',
                position: 'top',
                topOffset: 50,
            });
        } catch (error) {
            console.error('L·ªói ƒë·∫∑t h√†ng:', error);
            Toast.show({
                type: 'error',
                text1: 'L·ªói',
                text2: 'ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.',
                position: 'top',
                topOffset: 50,
            });
        }
    };

    // --- Render Component ---
    return (
        <View style={styles.container}>
            <Text style={styles.header}>Th√¥ng tin kh√°ch h√†ng</Text>
            {customerInfo ? (
                <View style={styles.customerInfo}>
                    <Text style={styles.infoText}><Text style={{ fontWeight: 'bold' }}>T√†i kho·∫£n:</Text> {customerInfo.account}</Text>
                    <Text style={styles.infoText}><Text style={{ fontWeight: 'bold' }}>Email:</Text> {customerInfo.email}</Text>

                    {/* KHU V·ª∞C NH·∫¨P LI·ªÜU B·ªî SUNG */}
                    <Text style={styles.subHeader}>Th√¥ng tin giao h√†ng</Text>

                    <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i:</Text>
                    <TextInput
                        style={styles.input}
                        placeholder="Nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë"
                        keyboardType="phone-pad"
                        value={newPhone}
                        onChangeText={setNewPhone}
                    />

                    <Text style={styles.label}>ƒê·ªãa ch·ªâ:</Text>
                    <TextInput
                        style={styles.input}
                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng chi ti·∫øt"
                        value={newAddress}
                        onChangeText={setNewAddress}
                        multiline
                    />

                    <TouchableOpacity
                        style={styles.updateButton}
                        onPress={handleUpdateCustomerInfo}
                    >
                        <Text style={styles.updateButtonText}>C·∫≠p nh·∫≠t SƒêT & ƒê·ªãa ch·ªâ</Text>
                    </TouchableOpacity>

                    <View style={styles.currentInfo}>
                        <Text style={styles.currentInfoText}><Text style={{ fontWeight: 'bold' }}>SƒêT hi·ªán t·∫°i:</Text> {customerInfo.phone || 'Ch∆∞a c√≥'}</Text>
                        <Text style={styles.currentInfoText}><Text style={{ fontWeight: 'bold' }}>ƒê·ªãa ch·ªâ hi·ªán t·∫°i:</Text> {customerInfo.address || 'Ch∆∞a c√≥'}</Text>
                    </View>

                </View>
            ) : (
                <Text style={styles.missingInfo}>Ch∆∞a c√≥ th√¥ng tin t√†i kho·∫£n. Vui l√≤ng ƒêƒÉng nh·∫≠p/ƒêƒÉng k√Ω.</Text>
            )}

            <Text style={styles.header}>Gi·ªè h√†ng</Text>
            {cart.length > 0 ? (
                <>
                    <FlatList
                        data={cart}
                        keyExtractor={(item) => item.id}
                        renderItem={({ item }) => (
                            <View style={styles.cartItem}>
                                <Image source={imagesMap[item.imageName]} style={styles.itemImage} />
                                <View style={styles.itemDetails}>
                                    <Text style={styles.itemName} numberOfLines={2}>{item.name}</Text>
                                    <Text style={styles.itemQuantity}>SL: {item.quantity}</Text>
                                    <Text style={styles.itemPriceText}>ƒê∆°n gi√°: {item.price.toLocaleString('vi-VN')} ƒë</Text>
                                </View>
                                <View style={styles.itemRight}>
                                    <Text style={styles.itemTotalPrice}>{(item.price * item.quantity).toLocaleString('vi-VN')} ƒë</Text>
                                    {/* N√∫t X√≥a */}
                                    <TouchableOpacity
                                        style={styles.removeButton}
                                        onPress={() => handleRemoveItem(item.id)}
                                    >
                                        <Text style={styles.removeButtonText}>X√≥a</Text>
                                        {/* N·∫øu d√πng Icon: <Icon name="trash-outline" size={20} color="#fff" /> */}
                                    </TouchableOpacity>
                                </View>
                            </View>
                        )}
                    />
                    <View style={styles.totalContainer}>
                        <Text style={styles.totalText}>T·ªïng c·ªông:</Text>
                        <Text style={styles.totalTextPrice}>{totalPrice.toLocaleString('vi-VN')} ƒë</Text>
                    </View>

                    <TouchableOpacity style={styles.orderButton} onPress={handlePlaceOrder}>
                        <Text style={styles.orderButtonText}>ƒê·∫∑t h√†ng</Text>
                    </TouchableOpacity>
                </>
            ) : (
                <Text>Gi·ªè h√†ng tr·ªëng.</Text>
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 20, backgroundColor: '#fff' },
    header: { fontSize: 22, fontWeight: 'bold', marginVertical: 10 },
    subHeader: { fontSize: 16, fontWeight: 'bold', marginTop: 15, marginBottom: 5, color: '#007bff' },

    // C·∫≠p nh·∫≠t Customer Info
    customerInfo: { marginBottom: 20, padding: 15, backgroundColor: '#f0f0f0', borderRadius: 8 },
    infoText: { fontSize: 14, marginBottom: 4 },
    missingInfo: { color: 'red', marginBottom: 10 },

    // Input & Button m·ªõi
    label: { fontSize: 14, marginTop: 8, marginBottom: 4, fontWeight: '500' },
    input: {
        borderWidth: 1,
        borderColor: '#ccc',
        padding: 10,
        borderRadius: 5,
        marginBottom: 10,
        backgroundColor: '#fff',
    },
    updateButton: {
        backgroundColor: '#007bff',
        paddingVertical: 10,
        borderRadius: 5,
        alignItems: 'center',
        marginTop: 10,
        marginBottom: 15,
    },
    updateButtonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
    currentInfo: {
        marginTop: 5,
        padding: 10,
        backgroundColor: '#e9ecef',
        borderRadius: 5,
    },
    currentInfoText: { fontSize: 14, color: '#495057' },

    // C·∫£i ti·∫øn Item (Gi·ªØ nguy√™n)
    cartItem: {
        flexDirection: 'row',
        paddingVertical: 15,
        borderBottomWidth: 1,
        borderColor: '#eee',
        alignItems: 'center',
    },
    itemImage: {
        width: 60,
        height: 60,
        borderRadius: 8,
        marginRight: 10
    },
    itemDetails: {
        flex: 1,
        marginRight: 10,
    },
    itemName: {
        fontSize: 16,
        fontWeight: '600',
        marginBottom: 4,
    },
    itemQuantity: {
        fontSize: 14,
        color: '#666',
    },
    itemPriceText: {
        fontSize: 14,
        color: '#999',
    },

    // Ph·∫ßn b√™n ph·∫£i (T·ªïng ti·ªÅn v√† X√≥a)
    itemRight: {
        alignItems: 'flex-end',
        justifyContent: 'space-between',
        height: 60,
    },
    itemTotalPrice: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#d9534f',
    },
    removeButton: {
        backgroundColor: '#dc3545',
        paddingHorizontal: 8,
        paddingVertical: 4,
        borderRadius: 4,
    },
    removeButtonText: {
        color: '#fff',
        fontSize: 12,
        fontWeight: 'bold',
    },

    // Total Container (Gi·ªØ nguy√™n)
    totalContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginVertical: 15,
        borderTopWidth: 1,
        borderColor: '#ccc',
        paddingTop: 10,
    },
    totalText: { fontSize: 18, fontWeight: 'bold' },
    totalTextPrice: { fontSize: 18, fontWeight: 'bold', color: '#28a745' },

    // Order Button (Gi·ªØ nguy√™n)
    orderButton: {
        backgroundColor: '#28a745',
        paddingVertical: 15,
        borderRadius: 30,
        alignItems: 'center',
        marginTop: 10,
    },
    orderButtonText: { color: '#fff', fontSize: 18, fontWeight: '700' },
});